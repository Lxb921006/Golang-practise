package main

import "fmt"

//进制
func main() {
	//二进制0-1 满2进1
	//在Golang中，不能直接使用二进制来表示一个整数，它沿用了c的特点
	var i int = 3
	fmt.Printf("i=%b\n", i)

	//十进制0-9 满10进1

	//八进制0-7 满8进1, 以数字0开头表示, 可以直接表示
	var ii int = 011
	var ii1 int = 128
	fmt.Printf("ii=%b\n", ii)
	fmt.Printf("ii1=%o\n", ii1)

	//十六进制0-9及A-F, 满16进1, 以0x或者0X开头表示, 此处的A-F不区分大小写如： 0x21AF+1 = 0X21B0
	var iii int = 0x11
	fmt.Println("iii=", iii)

	//其他进制转十进制

	//二进制转十进制：从最低位开始（最右边），将每个位上的数提取出来，乘以2的（位数-1）次方，然后求和
	//1010 = 0 * 2的(1-1=0)次方 + 1 * 2的(2-1=1)次方 + 0 * 2的(3-1=2)的次方 + 1 * 2的(4-1=3)的次方 = 11
	//134 = 4 * 10的(1-1=0)次方 + 3 * 10的(2-1=1)次方 + 1 * 10的(3-1)次方 = 134 十进制的计算方法

	//八进制转成十进制：从最低位开始（最右边），将每个位上的数提取出来，乘以8的（位数-1）次方，然后求和
	//4324 = 4 * 8的(1-1=0)次方 + 2 * 8的(2-1=1)次方 + 3 * 8的(3-1=2)次方 + 4 * 8的(4-1=3)次方 = 2260

	//十六进制转成十进制：从最低位开始（最右边），将每个位上的数提取出来，乘以16的（位数-1）次方，然后求和
	//239 = 9 * 16的(1-1)次方 + 3 * 16的(2-1)次方 + 2 * 16的(3-1)次方 = 569

	//十进制转成其他进制

	//十进制转二进制：将该数不断的除以2，直到商为0为止，然后将每一步得到的余数倒过来，就是对应的二进制
	//120的二进制1111000, 120/2=60余数0, 60/2=30余数0, 30/2=15余数0, 15/2=7余数1, 7/2=3余数1, 3/2=1余数1,结果1111000

	//十进制转八进制：将该数不断的除以8，直到商为0为止，然后将每一步得到的余数倒过来，就是对应的二进制
	//120转八进制170, 120/8=15余数0 , 15/8=1余数7, 结果170

	//十进制转十六进制：将该数不断的除以16，直到商为0为止，然后将每一步得到的余数倒过来，就是对应的二进制
	//120转十六进制78, 120/16=7余数8, 结果78

	//二进制转其他进制

	//二进制转八进制：二进制数每三位一组（从地位开始组合）转成十进制然后组合，就是对应八进制数
	//111000 = 1 * 2的（1-1=0）次方 + 1 * 2的（2-1=0）次方 + 1 * 2的（3-1=0次方= 70

	//二进制转十六进制：二进制数每四位一组（从地位开始组合）转成十进制然后组合，就是对应八进制数
	//111000， 1000 = 8， 0011 = 1 * 2的（1-1=0）次方 + 1 * 2的（2-1）次方 = 3，从地位开始组合及=38

	//其他进制转成二进制

	//八进制转成二进制：将八进制数每一位，转成对应的一个3位的二进制数即可
	//120 = 1 + 2/2=1余数=0=010（位数不够要往前补0） + 000 组合=1010000

	//十六进制转成二进制：将八进制数每一位，转成对应的一个4位的二进制数即可
	//120 = 1 + 2/2=1余数=0=0010（位数不够要往前补0） + 0000 组合=100100000

}
